// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: world.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace AutoGenerated.Message {

  /// <summary>Holder for reflection information generated from world.proto</summary>
  public static partial class WorldReflection {

    #region Descriptor
    /// <summary>File descriptor for world.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static WorldReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgt3b3JsZC5wcm90bxIIcHJvdG9jb2wiIAoGUVdvcmxkEgoKAnExGAEgASgF",
            "EgoKAnEyGAIgASgFIiAKBlJXb3JsZBIKCgJyMRgBIAEoBRIKCgJyMhgCIAEo",
            "BUIYqgIVQXV0b0dlbmVyYXRlZC5NZXNzYWdlYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::AutoGenerated.Message.QWorld), global::AutoGenerated.Message.QWorld.Parser, new[]{ "Q1", "Q2" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AutoGenerated.Message.RWorld), global::AutoGenerated.Message.RWorld.Parser, new[]{ "R1", "R2" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class QWorld : pb::IMessage<QWorld> {
    private static readonly pb::MessageParser<QWorld> _parser = new pb::MessageParser<QWorld>(() => new QWorld());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QWorld> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AutoGenerated.Message.WorldReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QWorld() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QWorld(QWorld other) : this() {
      q1_ = other.q1_;
      q2_ = other.q2_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QWorld Clone() {
      return new QWorld(this);
    }

    /// <summary>Field number for the "q1" field.</summary>
    public const int Q1FieldNumber = 1;
    private int q1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Q1 {
      get { return q1_; }
      set {
        q1_ = value;
      }
    }

    /// <summary>Field number for the "q2" field.</summary>
    public const int Q2FieldNumber = 2;
    private int q2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Q2 {
      get { return q2_; }
      set {
        q2_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QWorld);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QWorld other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Q1 != other.Q1) return false;
      if (Q2 != other.Q2) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Q1 != 0) hash ^= Q1.GetHashCode();
      if (Q2 != 0) hash ^= Q2.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Q1 != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Q1);
      }
      if (Q2 != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Q2);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Q1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Q1);
      }
      if (Q2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Q2);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QWorld other) {
      if (other == null) {
        return;
      }
      if (other.Q1 != 0) {
        Q1 = other.Q1;
      }
      if (other.Q2 != 0) {
        Q2 = other.Q2;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Q1 = input.ReadInt32();
            break;
          }
          case 16: {
            Q2 = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RWorld : pb::IMessage<RWorld> {
    private static readonly pb::MessageParser<RWorld> _parser = new pb::MessageParser<RWorld>(() => new RWorld());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RWorld> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AutoGenerated.Message.WorldReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RWorld() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RWorld(RWorld other) : this() {
      r1_ = other.r1_;
      r2_ = other.r2_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RWorld Clone() {
      return new RWorld(this);
    }

    /// <summary>Field number for the "r1" field.</summary>
    public const int R1FieldNumber = 1;
    private int r1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int R1 {
      get { return r1_; }
      set {
        r1_ = value;
      }
    }

    /// <summary>Field number for the "r2" field.</summary>
    public const int R2FieldNumber = 2;
    private int r2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int R2 {
      get { return r2_; }
      set {
        r2_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RWorld);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RWorld other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (R1 != other.R1) return false;
      if (R2 != other.R2) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (R1 != 0) hash ^= R1.GetHashCode();
      if (R2 != 0) hash ^= R2.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (R1 != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(R1);
      }
      if (R2 != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(R2);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (R1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(R1);
      }
      if (R2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(R2);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RWorld other) {
      if (other == null) {
        return;
      }
      if (other.R1 != 0) {
        R1 = other.R1;
      }
      if (other.R2 != 0) {
        R2 = other.R2;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            R1 = input.ReadInt32();
            break;
          }
          case 16: {
            R2 = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
