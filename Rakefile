require 'json'
require 'fileutils'

BUILD_DIR = File.expand_path('__BUILD')
OUT_DIR = "autogen"
MESSAGE_DIR = "protos"
DOCUMENT_DIR = '__DOC'
MESSAGE_NAMESPACE = 'AutoGenerated.Message'
BASE_DIR = __dir__

task :default do
  sh 'rake -T'
end

task :ensure_build_dir do
  mkdir_p BUILD_DIR
end


desc "auto genreate"
task :protocolflow => [:ensure_build_dir] do
  # dependencies for protoc
  # ref: https://developers.google.com/protocol-buffers/docs/downloads
  # brew install protobuf # for macOs

  # % it isn't required.%
  # sh 'git clone https://github.com/google/protobuf.git'
  # Dir.chdir('protobuf/csharp/src/Google.Protobuf') do
  #   sh 'dotnet restore'
  #   sh 'dotnet build --configuration Debug'
  # end


  message_dir = File.expand_path(MESSAGE_DIR)
  output = File.expand_path('unity_project/Assets/output')
  mkdir_p output

  Dir.chdir(BUILD_DIR) do
    outdir_autogen = File.join(BUILD_DIR, OUT_DIR)

    # gen message.
    rm_rf MESSAGE_NAMESPACE
    sh "dotnet new classlib -o #{MESSAGE_NAMESPACE}"
    sh "protoc -I=#{message_dir} --csharp_out=#{MESSAGE_NAMESPACE} #{message_dir}/*.proto --csharp_opt=file_extension=.autogen.cs"
    Dir.chdir(MESSAGE_NAMESPACE) do
      sh "dotnet add package Google.Protobuf -v 3.6.0"
      sh "dotnet build"
    end
    dll_fpath = File.expand_path("#{MESSAGE_NAMESPACE}/bin/Debug/netstandard2.0/#{MESSAGE_NAMESPACE}.dll")

    # autogen.
    sh "dotnet nf-protocolflow --dll #{dll_fpath} --out #{outdir_autogen}"

    # copy Message
    cs_files = Dir.glob("#{MESSAGE_NAMESPACE}/**/{Library.cs,*.autogen.cs}")
    cs_files.each do |cs|
      dir = "#{output}/#{File.dirname(cs)}"
      mkdir_p(dir)
      puts cs
      cp_r(cs, dir)
    end

    # copy Protocol.
    cs_files = Dir.glob("#{OUT_DIR}/*.cs")
    cs_files.each do |cs|
      dir = "#{output}/#{File.dirname(cs)}"
      mkdir_p(dir)
      puts cs
      cp_r(cs, dir)
    end

    # copy dll.
    dlls = ['Google.Protobuf.dll', 'NF.Results.dll']
    dlls.each do |dll|
      if File.exist?("#{output}/#{dll}")
        next
      end

      puts dll
      cp_r("#{TOOL_DIR}/#{dll}", output)
    end
  end
end


# TODO(pyoung): comment out.
# desc "autogenerated compact one.dll"
# task :auto_one => [:auto_generate_dlls] do
#   Dir.chdir(BUILD_DIR) do
#     dlls = Dir.glob("*.dll").join(" ")
#     sh 'nuget install ILRepack -Version 2.0.12'
#     exe = 'ILRepack.2.0.12/tools/ILRepack.exe'
#     is_macOs = ((/darwin/ =~ RUBY_PLATFORM) != nil)
#     exe = "mono #{exe}" if is_macOs
#     output_dir = "one"
#     mkdir_p output_dir
#     output_dll_fpath = "#{output_dir}/NF_PROTOCOL.dll"
#     sh "#{exe} /out:#{output_dll_fpath} #{dlls}"
#   end
# end

desc 'install dotnet-nf-protocolflow'
task :tool_install do
  Dir.chdir('solution') do
    Dir.chdir('dotnet-nf-protocolflow') do
      sh 'dotnet pack'
      sh 'dotnet tool install --global --add-source ./nupkg dotnet-nf-protocolflow'
    end
  end
end

desc 'uninstall dotnet-nf-protocolflow'
task :tool_uninstall do
  sh 'dotnet tool uninstall -g dotnet-nf-protocolflow'
end

desc "run test server"
task :test_server do
  # pip install protobuf
  output_dir = "test_server"
  mkdir_p output_dir
  sh "protoc -I=#{MESSAGE_DIR} --python_out=#{output_dir} #{MESSAGE_DIR}/*.proto"
  Dir.chdir(output_dir) do
    sh "python main.py"
  end
end


desc "generate message document"
task :doc do
  # https://github.com/estan/protoc-gen-doc
  # https://github.com/ebenoist/homebrew-protoc-gen-doc

  sh 'brew tap ebenoist/protoc-gen-doc'
  sh 'brew install protoc-gen-doc'
  mkdir_p DOCUMENT_DIR
  sh "protoc --doc_out=html,index.html:#{DOCUMENT_DIR} @MESSAGE/*.proto"
end
