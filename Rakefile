require 'json'
require 'fileutils'

BUILD_DIR = '__BUILD'
MESSAGE_DIR = "protos"
DOCUMENT_DIR = '__DOC'

DOTNET_RUN = 'dotnet run'


task :default => :auto_generate_dlls

task :ensure_build_dir do
  mkdir_p BUILD_DIR
end


desc "auto genreate_dlls"
task :auto_generate_dlls => [:ensure_build_dir] do
  # dependencies for protoc
  # ref: https://developers.google.com/protocol-buffers/docs/downloads
  # brew install protobuf # for macOs

  # % it isn't required.%
  # sh 'git clone https://github.com/google/protobuf.git'
  # Dir.chdir('protobuf/csharp/src/Google.Protobuf') do
  #   sh 'dotnet restore'
  #   sh 'dotnet build --configuration Debug'
  # end

  output_dir = "solution/AutoGenerated.Message/output"
  mkdir_p output_dir
  sh "protoc -I=#{MESSAGE_DIR} --csharp_out=#{output_dir} #{MESSAGE_DIR}/*.proto --csharp_opt=file_extension=.autogen.cs"

  Dir.chdir('solution/AutoGenerated.Message') do
    sh 'dotnet restore'
    sh "dotnet build"
  end


  Dir.chdir('solution/NF.Network.Protocol.Interface') do
    sh 'dotnet restore'
    sh "dotnet build"
  end

  dll = File.expand_path("solution/AutoGenerated.Message/bin/Debug/netcoreapp2.0/AutoGenerated.Message.dll")
  interface_template = File.expand_path("solution/AutoGenerated.Interface/interface.liquid")
  interface_output = File.expand_path("solution/AutoGenerated.Interface/out")
  transfer_template = File.expand_path("solution/AutoGenerated.Transfer/transfer.liquid")
  transfer_output = File.expand_path("solution/AutoGenerated.Transfer/out")

  Dir.chdir('solution/NF.CLI.ProtocolGenerator') do
    sh 'dotnet restore'
    args = "--dll #{dll} --interface_template #{interface_template} --interface_output #{interface_output} --transfer_template #{transfer_template} --transfer_output #{transfer_output}"
	sh "dotnet run -- #{args}"
  end

  Dir.chdir('solution/AutoGenerated.Interface') do
    sh 'dotnet restore'
    sh "dotnet build"
  end

  Dir.chdir('solution/AutoGenerated.Transfer') do
    sh 'dotnet restore'
    sh "dotnet build"
  end

  FileUtils.cp_r(Dir.glob('solution/AutoGenerated.Transfer/bin/Debug/netcoreapp2.0/*.dll'), BUILD_DIR)
end


desc "update unityproject"
task :update_unityproject => [:auto_generate_dlls]  do
  output = 'unity_project/Assets/output'
  mkdir_p output

  # copy dll
  dlls = ['Google.Protobuf.dll', 'NF.Results.dll']
  dlls.each do |dll|
    cp_r("#{BUILD_DIR}/#{dll}", output)
  end

 # copy interface
  cs_files = Dir.glob("solution/NF.Network.Protocol.Interface/**/{Library.cs,*.autogen.cs}")
  cs_files.each do |cs|
    dir = "#{output}/#{File.dirname(cs)}"
    mkdir_p(dir)
    puts cs
    cp_r(cs, dir)
  end

  
  # copy autogen
  cs_files = Dir.glob("solution/AutoGenerated.*/**/{Library.cs,*.autogen.cs}")
  cs_files.each do |cs|
    dir = "#{output}/#{File.dirname(cs)}"
    mkdir_p(dir)
    puts cs
    cp_r(cs, dir)
  end

end


desc "autogenerated compact one.dll"
task :auto_one => [:auto_generate_dlls] do
  Dir.chdir(BUILD_DIR) do
    dlls = Dir.glob("*.dll").join(" ")
    sh 'nuget install ILRepack -Version 2.0.12'
    exe = 'ILRepack.2.0.12/tools/ILRepack.exe'

    is_macOs = ((/darwin/ =~ RUBY_PLATFORM) != nil)
    exe = "mono #{exe}" if is_macOs

    output_dir = "one"
    mkdir_p output_dir
    output_dll_fpath = "#{output_dir}/NF_PROTOCOL.dll"
    sh "#{exe} /out:#{output_dll_fpath} #{dlls}"
  end
end


desc "run test server"
task :test_server do
  # pip install protobuf
  output_dir = "test_server"
  mkdir_p output_dir
  sh "protoc -I=#{MESSAGE_DIR} --python_out=#{output_dir} #{MESSAGE_DIR}/*.proto"
  Dir.chdir(output_dir) do
    sh "python main.py"
  end
end



desc "generate message document"
task :generate_message_doc do
  # https://github.com/estan/protoc-gen-doc
  # https://github.com/ebenoist/homebrew-protoc-gen-doc

  sh 'brew tap ebenoist/protoc-gen-doc'
  sh 'brew install protoc-gen-doc'
  mkdir_p DOCUMENT_DIR
  sh "protoc --doc_out=html,index.html:#{DOCUMENT_DIR} @MESSAGE/*.proto"
end
